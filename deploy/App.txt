<!DOCTYPE html>
<html>
<head>
    <title>PPM Timesheet</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Fri Jul 02 2021 08:54:49 GMT-0600 (Mountain Daylight Time) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Jul 02 2021 08:54:49 GMT-0600 (Mountain Daylight Time)";
        var BUILDER = "kc683795";
        var CHECKSUM = 3083753201;
    </script>
    
    <script type="text/javascript" src="/apps/x/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});


Ext.define('Rally.apps.ppmtimesheet.PPMTimesheetApp', {
    extend: 'Rally.app.App',

    logger: new Rally.technicalservices.Logger(),

    mixins: ['Rally.clientmetrics.ClientMetricsRecordable'],

    appName: 'PPM Timesheet App v2',

    config: {
        defaultSettings: {
            ppmHost: null,
            ppmPort: 443,
            relativePath: null
        }
    },
    autoScroll: false,
    timesheetSuffix:  '/pm/integration.html#', //'/pm/#/timesheets',
    loggedInMessage:  "Connection to the Clarity timesheet has been launched in a separate tab.<br/><br/>Your browser pop-up blocker may interfere with this process.<br/><br/><a href=\"{0}\" target=\"clarityWindow\">Click here to access or re-launch Clarity.</a><br/><br/>If you will be accessing the Clarity timesheet regularly, you may wish to always allow popus from this site.",
//https://knowledge.broadcom.com/external/article?articleId=206489
    launch: function() {

        var server = this.getPPMHost(),
            port = this.getPPMPort();

         this.validateConfig(server, port).then({
                success: this.addLauncher,
                failure: this.showAppMessage,
                scope: this
        });
    },
    addLauncher: function(){
        var server = this.getPPMHost(),
        port = this.getPPMPort(),
        relativePath = this.getPPMRelativePath(),
        url = this.buildPPMTimesheetURL(server, port, relativePath),
        height = this.getHeight() || 600;
        this.logger.log("addLauncher",url);

        var msg = Ext.String.format(this.loggedInMessage, url, server);
        this.add({
            xtype: 'container',
            html: '<div class="secondary-message" style="font-family: ProximaNova,Helvetica,Arial;text-align:center;color:#8a8a8a;font-size:12pt;font-style:italic">' + msg
        });
        
        this.launchWindow(url);
    },
    launchWindow: function(url){
        if (!this.currentWindow || this.currentWindow.closed === true){
            this.currentWindow = window.open(url,'clarityWindow') //,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=1,resizable=0,width=700,height=600');
        } else {
            this.currentWindow.focus();
        }
    },

    validateConfig: function(server, port){
        var deferred = Ext.create('Deft.Deferred');

        if (!server){
            deferred.reject("No Clarity Server and Port is configured.  Please work with an administrator to configure your Clarity https server.");
        } else {
            deferred.resolve();
        }

        return deferred;
    },
    buildPPMTimesheetURL: function(server, port, relativePath){
        var url = Ext.String.format("https://{0}",server);
        if (port){
            url = Ext.String.format("{0}:{1}", url, port);
        }
        if( relativePath ) {
            if( !url.endsWith("/") && !relativePath.startsWith("/") ) {
                url = url + "/";
            } 
            return url + relativePath;
        } else {
            return url + this.timesheetSuffix;        	
        }
    },
    getPPMHost: function(){
        return this.getSetting('ppmHost') || null;
    },
    getPPMPort: function(){
        return this.getSetting('ppmPort') || null;
    },
    getPPMRelativePath: function(){
        return this.getSetting('ppmRelativePathWithParams') || null;
    },
    showAppMessage: function(msg){
        this.removeAll();
        this.add({
            xtype: 'container',
            html: Ext.String.format('<div class="no-data-container"><div class="secondary-message">{0}</div></div>',msg)
        });
    },
    getSettingsFields: function () {

        return [{
            xtype: 'container',
            html: '<div class="secondary-message" style="font-family: ProximaNovaBold,Helvetica,Arial;text-align:left;color:#B81B10;font-size:12pt;">NOTE:  The Clarity server must be version 15.2 or above.</div>'
        },{
            name: 'ppmHost',
            xtype: 'rallytextfield',
            width: 600,
            labelWidth: 225,
            labelAlign: 'right',
            fieldLabel: 'Clarity Host name<br/><em>(for SSO the IdP URL)</em>',
            margin: '10 0 10 0',
            maskRe:  /[a-zA-Z0-9\.\-]/,
            emptyText: 'Please enter a Host name or IP Address...',
            maxLength: 255
        },{
            name: 'ppmPort',
            xtype:'rallynumberfield',
            labelAlign: 'right',
            fieldLabel: 'Port (HTTPS)',
            labelWidth: 225,
            emptyText: 443,
            minValue: 0,
            maxValue: 65535,
            allowBlank: true,
            allowDecimals: false,
            allowExponential: false
        },{
            name: 'ppmRelativePathWithParams',
            xtype: 'rallytextfield',
            width: 600,
            labelWidth: 225,
            labelAlign: 'right',
            fieldLabel: 'Clarity Host Relative Path<br/><em>(for SSO only)</em>',
            margin: '10 0 10 0',
            //maskRe:  /[a-zA-Z0-9\.\-]/,
            //emptyText: 'In SSO environment, enter relative path with any parameters of IdP initiated SSO PPM URL here and enter host address above ...',
            emptyText: 'In SSO environment, enter relative path with any parameters of IdP URL here...',
            maxLength: 500
        }];
    }
});
            
               Rally.launchApp('Rally.apps.ppmtimesheet.PPMTimesheetApp', {
                   name: 'PPM Timesheet'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.noScrolling {
    overflow: hidden;
}

.subtext {
    color:dimgrey;
    font-style: italic;
}
    </style>

</head>
<body></body>
</html>